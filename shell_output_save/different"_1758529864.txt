1d0
< 
153,157d151
<         .inventory-sync-card {
<             background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
<             color: white;
<             border-radius: 15px;
<         }
205,221d198
< 
<         .sync-stats {
<             background: rgba(255, 255, 255, 0.1);
<             border-radius: 8px;
<             padding: 10px;
<             margin: 10px 0;
<         }
< 
<         .inventory-btn-group .btn {
<             margin: 2px;
<             min-width: 120px;
<         }
<         .backup-card {
<             background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
<             color: white;
<             border-radius: 15px;
<         }
243,245c220
<                 {% if user_role == 'admin' %}
<                 <li><a href="{{ url_for('backup_status') }}"><i class="fas fa-database mr-2"></i> Database Backup</a></li>
<                 {% endif %}
---
>                 <li><a href="{{ url_for('backup_status') }}"><i class="fas fa-shield-alt mr-2"></i> Database Backup</a></li>
362c337
<                 {# Enhanced Synchronization Cards - Visible only to Admins #}
---
>                 {# Enhanced Synchronization Card - Visible only to Admins #}
364,365d338
<                 
<                 {# Business & User Synchronization Card #}
368c341
<                         <i class="fas fa-sync-alt mr-2"></i>Business & User Synchronization
---
>                         <i class="fas fa-sync-alt mr-2"></i>Data Synchronization
398,507d370
< 
<                 {# Inventory Synchronization Card #}
<                 <div class="card inventory-sync-card p-4 mb-4">
<                     <h3 class="h5 font-weight-semibold mb-3">
<                         <i class="fas fa-boxes mr-2"></i>Inventory Synchronization
<                     </h3>
<                     
<                     <div class="row mb-3">
<                         <div class="col-md-8">
<                             <div class="d-flex align-items-center mb-2">
<                                 <span id="inventorySyncStatusText" class="font-weight-bold">Ready</span>
<                             </div>
<                             <div id="inventoryLastSyncTime" class="text-light small opacity-75">Last Inventory Sync: N/A</div>
<                             
<                             <div class="sync-stats mt-2">
<                                 <div class="row text-center">
<                                     <div class="col-4">
<                                         <div class="small opacity-75">Local Items</div>
<                                         <div id="localInventoryCount" class="font-weight-bold">{{ total_products }}</div>
<                                     </div>
<                                     <div class="col-4">
<                                         <div class="small opacity-75">Last Pull</div>
<                                         <div id="lastInventoryPull" class="font-weight-bold">Never</div>
<                                     </div>
<                                     <div class="col-4">
<                                         <div class="small opacity-75">Last Push</div>
<                                         <div id="lastInventoryPush" class="font-weight-bold">Never</div>
<                                     </div>
<                                 </div>
<                             </div>
<                         </div>
<                         
<                         <div class="col-md-4">
<                             <div class="inventory-btn-group text-center">
<                                 <button id="pullInventoryBtn" class="btn btn-light sync-button mb-2 btn-block">
<                                     <i id="pullIcon" class="fas fa-download mr-1"></i> 
<                                     <span id="pullButtonText">Pull Inventory</span>
<                                 </button>
<                                 <button id="pushInventoryBtn" class="btn btn-outline-light sync-button mb-2 btn-block">
<                                     <i id="pushIcon" class="fas fa-upload mr-1"></i> 
<                                     <span id="pushButtonText">Push Inventory</span>
<                                 </button>
<                                 <button id="syncInventoryBtn" class="btn btn-warning btn-sm btn-block">
<                                     <i id="fullSyncIcon" class="fas fa-sync mr-1"></i>
<                                     <span id="fullSyncText">Full Sync</span>
<                                 </button>
<                             </div>
<                         </div>
<                     </div>
< 
<                     <!-- Inventory Progress section -->
<                     <div id="inventoryProgressContainer" class="sync-progress" style="display: none;">
<                         <div class="progress mb-2" style="height: 8px;">
<                             <div id="inventoryProgressBar" class="progress-bar progress-bar-custom" role="progressbar" style="width: 0%"></div>
<                         </div>
<                         <div id="inventorySyncMessage" class="text-light small">Ready for inventory sync...</div>
<                     </div>
<                 </div>
< 
<                 {# Database Backup Card #}
<                 <div class="card backup-card p-4 mb-4">
<                     <h3 class="h5 font-weight-semibold mb-3">
<                         <i class="fas fa-database mr-2"></i>Database Backup & Recovery
<                     </h3>
<                     
<                     <div class="row mb-3">
<                         <div class="col-md-8">
<                             <div class="d-flex align-items-center mb-2">
<                                 <span id="backupStatusText" class="font-weight-bold">Protected</span>
<                             </div>
<                             <div id="lastBackupTime" class="text-light small opacity-75">Last Backup: Loading...</div>
<                             <div class="sync-stats mt-2">
<                                 <div class="row text-center">
<                                     <div class="col-4">
<                                         <div class="small opacity-75">Total Backups</div>
<                                         <div id="totalBackupsCount" class="font-weight-bold">--</div>
<                                     </div>
<                                     <div class="col-4">
<                                         <div class="small opacity-75">Auto Backup</div>
<                                         <div class="font-weight-bold">Every 6h</div>
<                                     </div>
<                                     <div class="col-4">
<                                         <div class="small opacity-75">Storage</div>
<                                         <div class="font-weight-bold">Local</div>
<                                     </div>
<                                 </div>
<                             </div>
<                         </div>
<                         
<                         <div class="col-md-4">
<                             <div class="text-center">
<                                 <button id="createBackupBtn" class="btn btn-light sync-button mb-2 btn-block">
<                                     <i class="fas fa-save mr-1"></i> 
<                                     Create Backup
<                                 </button>
<                                 <a href="{{ url_for('backup_status') }}" class="btn btn-outline-light btn-sm btn-block">
<                                     <i class="fas fa-list mr-1"></i> Manage Backups
<                                 </a>
<                             </div>
<                         </div>
<                     </div>
< 
<                     <!-- Backup Progress section -->
<                     <div id="backupProgressContainer" class="sync-progress" style="display: none;">
<                         <div class="progress mb-2" style="height: 8px;">
<                             <div id="backupProgressBar" class="progress-bar progress-bar-custom" role="progressbar" style="width: 0%"></div>
<                         </div>
<                         <div id="backupMessage" class="text-light small">Creating backup...</div>
<                     </div>
<                 </div>
612,647c475,477
<     <script>
<         // Enhanced sync management
<         let syncStatusInterval;
<         let currentSyncStatus = 'idle';
<         let inventorySyncStatus = 'idle';
<         let isOnline = false;
< 
<         // Get CSRF token
<         function getCSRFToken() {
<             return $('meta[name=csrf-token]').attr('content');
<         }
< 
<         $(document).ready(function() {
<             // Sidebar toggle functionality
<             $('#sidebarCollapse').on('click', function() {
<                 $('#sidebar, #content').toggleClass('active');
<             });
<             $('#sidebarCollapseTop').on('click', function() {
<                 $('#sidebar, #content').toggleClass('active');
<             });
< 
<             // Initialize sync functionality if present
<             if ($('#syncStatusText').length) {
<                 updateSyncStatus();
<                 startSyncStatusPolling();
<             }
< 
<             // Initialize inventory sync status
<             if ($('#inventorySyncStatusText').length) {
<                 loadInventorySyncStatus();
<             }
< 
<             // Initialize backup status
<             if ($('#backupStatusText').length) {
<                 loadBackupStatus();
<             }
---
>     <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
> <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
> <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
649,652c479,490
<             // Backup button handlers
<             $('#createBackupBtn').on('click', function() {
<                 createManualBackup();
<             });
---
> <script>
>     let syncStatusInterval;
>     let currentSyncStatus = 'idle';
>     let isOnline = false;
> 
>     function getCSRFToken() {
>         return $('meta[name=csrf-token]').attr('content');
>     }
> 
>     $(document).ready(function() {
>         $('#sidebarCollapse, #sidebarCollapseTop').on('click', function() {
>             $('#sidebar, #content').toggleClass('active');
655,671c493,516
<         /**
<          * Start continuous polling of sync status (every 2 seconds)
<          */
<         function startSyncStatusPolling() {
<             if (syncStatusInterval) {
<                 clearInterval(syncStatusInterval);
<             }
<             syncStatusInterval = setInterval(updateSyncStatus, 2000);
<         }
< 
<         /**
<          * Stop sync status polling
<          */
<         function stopSyncStatusPolling() {
<             if (syncStatusInterval) {
<                 clearInterval(syncStatusInterval);
<                 syncStatusInterval = null;
---
>         if ($('#syncStatusText').length) {
>             updateSyncStatus();
>             startSyncStatusPolling();
>         }
>     });
> 
>     function startSyncStatusPolling() {
>         if (syncStatusInterval) clearInterval(syncStatusInterval);
>         syncStatusInterval = setInterval(updateSyncStatus, 2000);
>     }
>     function stopSyncStatusPolling() {
>         if (syncStatusInterval) clearInterval(syncStatusInterval);
>     }
> 
>     function updateSyncStatus() {
>         $.ajax({
>             url: "{{ url_for('sync_status') }}",
>             type: 'GET',
>             success: function(data) {
>                 updateSyncUI(data);
>             },
>             error: function(xhr) {
>                 console.error("Error fetching sync status:", xhr.responseText);
>                 updateSyncUI({ status: 'error', online: false, message: 'Failed to get sync status', is_running: false, progress: 0 });
673c518,519
<         }
---
>         });
>     }
675,687c521,575
<         /**
<          * Load inventory sync status from localStorage and update UI
<          */
<         function loadInventorySyncStatus() {
<             const lastPull = localStorage.getItem('lastInventoryPull');
<             const lastPush = localStorage.getItem('lastInventoryPush');
<             
<             if (lastPull) {
<                 $('#lastInventoryPull').text(new Date(lastPull).toLocaleDateString());
<             }
<             if (lastPush) {
<                 $('#lastInventoryPush').text(new Date(lastPush).toLocaleDateString());
<             }
---
>     function updateSyncUI(data) {
>         currentSyncStatus = data.status || 'idle';
>         isOnline = data.online !== false;
>         const isRunning = data.is_running || currentSyncStatus === 'in_progress';
>         const progress = data.progress || 0;
> 
>         let statusClass = isOnline ? 'status-online' : 'status-offline';
>         if (isRunning) statusClass = 'status-syncing';
>         const statusText = isOnline ? (isRunning ? 'Syncing' : 'Online') : 'Offline';
>         $('#syncStatusText').html(`Status: <span class="${statusClass}">${statusText}</span>`);
> 
>         const lastSyncText = data.last_sync ? new Date(data.last_sync).toLocaleString() : 'Never';
>         $('#lastSyncTime').text(`Last Sync: ${lastSyncText}`);
> 
>         let details = [];
>         if (data.current_operation) details.push(`Operation: ${data.current_operation}`);
>         if (typeof data.local_businesses === 'number') details.push(`Businesses: ${data.local_businesses}`);
>         if (typeof data.local_inventory_items === 'number') details.push(`Inventory: ${data.local_inventory_items}`);
>         $('#syncDetails').text(details.join(' | '));
> 
>         const syncButton = $('#triggerSyncBtn');
>         const syncButtonText = $('#syncButtonText');
>         const syncIcon = $('#syncIcon');
>         
>         syncButton.removeClass('syncing success error').prop('disabled', false);
> 
>         if (isRunning) {
>             syncButton.addClass('syncing').prop('disabled', true);
>             syncButtonText.text('Syncing...');
>             syncIcon.removeClass().addClass('fas fa-spinner fa-spin mr-1');
>         } else if (currentSyncStatus === 'completed') {
>             syncButton.addClass('success');
>             syncButtonText.text('Sync Complete');
>             syncIcon.removeClass().addClass('fas fa-check mr-1');
>             setTimeout(() => { if (currentSyncStatus !== 'in_progress') resetSyncButton(); }, 3000);
>         } else if (currentSyncStatus === 'error' || data.error) {
>             syncButton.addClass('error');
>             syncButtonText.text('Sync Failed - Retry');
>             syncIcon.removeClass().addClass('fas fa-exclamation-triangle mr-1');
>         } else if (!isOnline) {
>             syncButton.prop('disabled', true);
>             syncButtonText.text('Offline');
>             syncIcon.removeClass().addClass('fas fa-wifi mr-1');
>         } else {
>             resetSyncButton();
>         }
> 
>         if (isRunning && (data.message || progress > 0)) {
>             $('#syncProgressContainer').show();
>             $('#progressBar').css('width', progress + '%');
>             if (data.message) $('#syncMessage').text(data.message);
>         } else if (!isRunning) {
>             setTimeout(() => {
>                 if (!syncButton.hasClass('syncing')) $('#syncProgressContainer').hide();
>             }, 1000);
688a577
>     }
690,708c579,619
<         /**
<          * Update sync status by fetching from server
<          */
<         function updateSyncStatus() {
<             $.ajax({
<                 url: "{{ url_for('sync_status') }}",
<                 type: 'GET',
<                 success: function(data) {
<                     updateSyncUI(data);
<                 },
<                 error: function(xhr) {
<                     console.error("Error fetching sync status:", xhr.responseText);
<                     updateSyncUI({
<                         status: 'error',
<                         online: false,
<                         message: 'Failed to get sync status',
<                         last_sync: null,
<                         is_running: false,
<                         progress: 0
---
>     function resetSyncButton() {
>         $('#triggerSyncBtn').removeClass('syncing success error');
>         $('#syncButtonText').text('Sync Now');
>         $('#syncIcon').removeClass().addClass('fas fa-sync-alt mr-1');
>     }
> 
>     function displayFlashMessage(category, message) {
>         $('#dynamicFlashMessages .dynamic-flash-message').remove();
>         const flashHtml = `
>             <div class="flash-message flash-${category} rounded p-3 mb-3 shadow-sm dynamic-flash-message">
>                 ${message}
>             </div>`;
>         $('#dynamicFlashMessages').html(flashHtml);
>         setTimeout(() => $('.dynamic-flash-message').fadeOut('slow', function() { $(this).remove(); }), 5000);
>     }
> 
>     // ✅ New unified Sync button handler
>   document.addEventListener("DOMContentLoaded", function () {
>         const syncBtn = document.getElementById("triggerSyncBtn");
>         const syncIcon = document.getElementById("syncIcon");
>         const syncButtonText = document.getElementById("syncButtonText");
>         const flashContainer = document.getElementById("dynamicFlashMessages");
> 
>         if (syncBtn) {
>             syncBtn.addEventListener("click", async function () {
>                 if (currentSyncStatus === 'in_progress' || !isOnline) return;
> 
>                 syncBtn.disabled = true;
>                 syncBtn.classList.add("syncing");
>                 syncIcon.classList.add("fa-spin");
>                 syncButtonText.textContent = "Syncing...";
> 
>                 try {
>                     const response = await fetch("/api/v1/sync/inventory", {
>                         method: "POST",
>                         headers: { 
>                             "Content-Type": "application/json",
>                             "X-Requested-With": "XMLHttpRequest",
>                             "X-CSRFToken": getCSRFToken()  <!-- ✅ send CSRF -->
>                         },
>                         body: JSON.stringify({}) <!-- ✅ Flask-WTF requires body -->
710,779c621
<                 }
<             });
<         }
< 
<         /**
<          * Update the UI based on sync status data
<          */
<         function updateSyncUI(data) {
<             // Update global state
<             currentSyncStatus = data.status || 'idle';
<             isOnline = data.online !== false;
<             const isRunning = data.is_running || currentSyncStatus === 'in_progress';
<             const progress = data.progress || 0;
< 
<             // Update status text
<             let statusClass = isOnline ? 'status-online' : 'status-offline';
<             if (isRunning) statusClass = 'status-syncing';
<             
<             const statusText = isOnline ? (isRunning ? 'Syncing' : 'Online') : 'Offline';
<             $('#syncStatusText').html(`Status: <span class="${statusClass}">${statusText}</span>`);
< 
<             // Update last sync time
<             const lastSyncText = data.last_sync ? new Date(data.last_sync).toLocaleString() : 'Never';
<             $('#lastSyncTime').text(`Last Sync: ${lastSyncText}`);
< 
<             // Update details
<             let details = [];
<             if (data.current_operation) {
<                 details.push(`Operation: ${data.current_operation}`);
<             }
<             if (typeof data.local_businesses === 'number') {
<                 details.push(`Businesses: ${data.local_businesses}`);
<             }
<             if (typeof data.local_inventory_items === 'number') {
<                 details.push(`Inventory: ${data.local_inventory_items}`);
<             }
<             $('#syncDetails').text(details.join(' | '));
< 
<             // Update sync button
<             const syncButton = $('#triggerSyncBtn');
<             const syncButtonText = $('#syncButtonText');
<             const syncIcon = $('#syncIcon');
<             
<             syncButton.removeClass('syncing success error').prop('disabled', false);
< 
<             if (isRunning) {
<                 syncButton.addClass('syncing').prop('disabled', true);
<                 syncButtonText.text('Syncing...');
<                 syncIcon.removeClass().addClass('fas fa-spinner fa-spin mr-1');
<             } else if (currentSyncStatus === 'completed') {
<                 syncButton.addClass('success');
<                 syncButtonText.text('Sync Complete');
<                 syncIcon.removeClass().addClass('fas fa-check mr-1');
<                 // Reset after 3 seconds
<                 setTimeout(() => {
<                     if (currentSyncStatus !== 'in_progress') {
<                         resetSyncButton();
<                     }
<                 }, 3000);
<             } else if (currentSyncStatus === 'error' || data.error) {
<                 syncButton.addClass('error');
<                 syncButtonText.text('Sync Failed - Retry');
<                 syncIcon.removeClass().addClass('fas fa-exclamation-triangle mr-1');
<             } else if (!isOnline) {
<                 syncButton.prop('disabled', true);
<                 syncButtonText.text('Offline');
<                 syncIcon.removeClass().addClass('fas fa-wifi mr-1');
<             } else {
<                 resetSyncButton();
<             }
---
>                     const data = await response.json();
781,791c623,636
<             // Update progress section
<             if (isRunning && (data.message || progress > 0)) {
<                 $('#syncProgressContainer').show();
<                 $('#progressBar').css('width', progress + '%');
<                 if (data.message) {
<                     $('#syncMessage').text(data.message);
<                 }
<             } else if (!isRunning) {
<                 setTimeout(() => {
<                     if (!syncButton.hasClass('syncing')) {
<                         $('#syncProgressContainer').hide();
---
>                     flashContainer.innerHTML = "";
>                     const alertDiv = document.createElement("div");
>                     alertDiv.classList.add("flash-message", "rounded", "p-3", "mb-3", "shadow-sm");
> 
>                     if (data.success) {
>                         alertDiv.classList.add("flash-success");
>                         alertDiv.innerHTML = `<i class="fas fa-check-circle"></i> ${data.message}`;
>                         syncBtn.classList.remove("error");
>                         syncBtn.classList.add("success");
>                     } else {
>                         alertDiv.classList.add("flash-danger");
>                         alertDiv.innerHTML = `<i class="fas fa-times-circle"></i> ${data.message}`;
>                         syncBtn.classList.remove("success");
>                         syncBtn.classList.add("error");
793,794c638
<                 }, 1000);
<             }
---
>                     flashContainer.appendChild(alertDiv);
796,857c640,647
<             // Enable/disable inventory sync buttons based on connection
<             $('.inventory-btn-group .btn').prop('disabled', !isOnline || isRunning);
<             if (!isOnline) {
<                 $('#inventorySyncStatusText').html('Status: <span class="status-offline">Offline</span>');
<             } else if (inventorySyncStatus === 'idle') {
<                 $('#inventorySyncStatusText').html('Status: <span class="status-online">Ready</span>');
<             }
<         }
< 
<         /**
<          * Reset sync button to default state
<          */
<         function resetSyncButton() {
<             $('#triggerSyncBtn').removeClass('syncing success error');
<             $('#syncButtonText').text('Sync Now');
<             $('#syncIcon').removeClass().addClass('fas fa-sync-alt mr-1');
<         }
< 
<         /**
<          * Display dynamic flash messages
<          */
<         function displayFlashMessage(category, message) {
<             $('#dynamicFlashMessages .dynamic-flash-message').remove();
<             const flashHtml = `
<                 <div class="flash-message flash-${category} rounded p-3 mb-3 shadow-sm dynamic-flash-message">
<                     ${message}
<                 </div>
<             `;
<             $('#dynamicFlashMessages').html(flashHtml);
<             setTimeout(function() {
<                 $('.dynamic-flash-message').fadeOut('slow', function() {
<                     $(this).remove();
<                 });
<             }, 5000);
<         }
< 
<         /**
<          * Update inventory sync button state
<          */
<         function updateInventorySyncButton(button, icon, text, status, isDisabled = false) {
<             const btn = $(button);
<             const iconEl = $(icon);
<             const textEl = $(text);
< 
<             btn.removeClass('syncing success error').prop('disabled', isDisabled);
<             
<             switch(status) {
<                 case 'syncing':
<                     btn.addClass('syncing');
<                     iconEl.removeClass().addClass('fas fa-spinner fa-spin mr-1');
<                     break;
<                 case 'success':
<                     btn.addClass('success');
<                     iconEl.removeClass().addClass('fas fa-check mr-1');
<                     setTimeout(() => {
<                         btn.removeClass('success');
<                         iconEl.removeClass().addClass(button === '#pullInventoryBtn' ? 'fas fa-download mr-1' : 'fas fa-upload mr-1');
<                     }, 3000);
<                     break;
<                 case 'error':
<                     btn.addClass('error');
<                     iconEl.removeClass().addClass('fas fa-exclamation-triangle mr-1');
---
>                 } catch (err) {
>                     console.error("Sync request failed:", err);
>                     flashContainer.innerHTML = `
>                         <div class="flash-message flash-danger rounded p-3 mb-3 shadow-sm">
>                             <i class="fas fa-times-circle"></i> Sync failed due to a network error.
>                         </div>`;
>                     syncBtn.classList.add("error");
>                 } finally {
859,1011c649,652
<                         btn.removeClass('error');
<                         iconEl.removeClass().addClass(button === '#pullInventoryBtn' ? 'fas fa-download mr-1' : 'fas fa-upload mr-1');
<                     }, 3000);
<                     break;
<                 default:
<                     iconEl.removeClass().addClass(button === '#pullInventoryBtn' ? 'fas fa-download mr-1' : 'fas fa-upload mr-1');
<             }
<         }
< 
<         // ===== INVENTORY SYNC FUNCTIONS =====
< 
<         /**
<          * Pull inventory from online server
<          */
<         $('#pullInventoryBtn').on('click', function() {
<             if (!isOnline || inventorySyncStatus === 'syncing') {
<                 return;
<             }
< 
<             if (!confirm('This will pull all inventory items for your business from the online server and update your local inventory. Continue?')) {
<                 return;
<             }
< 
<             inventorySyncStatus = 'syncing';
<             $('#inventorySyncStatusText').html('Status: <span class="status-syncing">Pulling Inventory...</span>');
<             $('#inventoryProgressContainer').show();
<             $('#inventoryProgressBar').css('width', '10%');
<             $('#inventorySyncMessage').text('Connecting to server...');
<             
<             updateInventorySyncButton('#pullInventoryBtn', '#pullIcon', '#pullButtonText', 'syncing', true);
<             $('#pullButtonText').text('Pulling...');
< 
<             $.ajax({
<                 url: '/api/v1/inventory/pull',  // We'll need to create this endpoint
<                 type: 'POST',
<                 headers: {
<                     'X-CSRFToken': getCSRFToken(),
<                     'X-Requested-With': 'XMLHttpRequest'
<                 },
<                 success: function(data) {
<                     $('#inventoryProgressBar').css('width', '100%');
<                     $('#inventorySyncMessage').text(`Successfully pulled ${data.count || 0} inventory items`);
<                     
<                     updateInventorySyncButton('#pullInventoryBtn', '#pullIcon', '#pullButtonText', 'success', false);
<                     $('#pullButtonText').text('Pull Complete');
<                     
<                     // Update local count
<                     $('#localInventoryCount').text(data.total_local_items || 0);
<                     
<                     // Store last pull time
<                     const now = new Date().toISOString();
<                     localStorage.setItem('lastInventoryPull', now);
<                     $('#lastInventoryPull').text(new Date(now).toLocaleDateString());
<                     
<                     displayFlashMessage('success', `<i class="fas fa-check-circle"></i> Successfully pulled ${data.count || 0} inventory items from server`);
<                     
<                     inventorySyncStatus = 'idle';
<                     $('#inventorySyncStatusText').html('Status: <span class="status-online">Ready</span>');
<                     
<                     // Hide progress after delay
<                     setTimeout(() => {
<                         $('#inventoryProgressContainer').hide();
<                         $('#pullButtonText').text('Pull Inventory');
<                     }, 3000);
<                 },
<                 error: function(xhr) {
<                     console.error("Error pulling inventory:", xhr.responseText);
<                     const errorMessage = xhr.responseJSON ? xhr.responseJSON.message : "Failed to pull inventory from server";
<                     
<                     updateInventorySyncButton('#pullInventoryBtn', '#pullIcon', '#pullButtonText', 'error', false);
<                     $('#pullButtonText').text('Pull Failed');
<                     
<                     $('#inventorySyncMessage').text('Pull failed: ' + errorMessage);
<                     displayFlashMessage('danger', '<i class="fas fa-times-circle"></i> ' + errorMessage);
<                     
<                     inventorySyncStatus = 'idle';
<                     $('#inventorySyncStatusText').html('Status: <span class="status-online">Ready</span>');
<                     
<                     setTimeout(() => {
<                         $('#inventoryProgressContainer').hide();
<                         $('#pullButtonText').text('Pull Inventory');
<                     }, 3000);
<                 }
<             });
<         });
< 
<         /**
<          * Push inventory to online server
<          */
<         $('#pushInventoryBtn').on('click', function() {
<             if (!isOnline || inventorySyncStatus === 'syncing') {
<                 return;
<             }
< 
<             if (!confirm('This will push all your local inventory items to the online server. Any conflicts will be resolved in favor of your local data. Continue?')) {
<                 return;
<             }
< 
<             inventorySyncStatus = 'syncing';
<             $('#inventorySyncStatusText').html('Status: <span class="status-syncing">Pushing Inventory...</span>');
<             $('#inventoryProgressContainer').show();
<             $('#inventoryProgressBar').css('width', '10%');
<             $('#inventorySyncMessage').text('Preparing data for upload...');
<             
<             updateInventorySyncButton('#pushInventoryBtn', '#pushIcon', '#pushButtonText', 'syncing', true);
<             $('#pushButtonText').text('Pushing...');
< 
<             $.ajax({
<                 url: '/api/v1/inventory/push',  // We'll need to create this endpoint
<                 type: 'POST',
<                 headers: {
<                     'X-CSRFToken': getCSRFToken(),
<                     'X-Requested-With': 'XMLHttpRequest'
<                 },
<                 success: function(data) {
<                     $('#inventoryProgressBar').css('width', '100%');
<                     $('#inventorySyncMessage').text(`Successfully pushed ${data.count || 0} inventory items`);
<                     
<                     updateInventorySyncButton('#pushInventoryBtn', '#pushIcon', '#pushButtonText', 'success', false);
<                     $('#pushButtonText').text('Push Complete');
<                     
<                     // Store last push time
<                     const now = new Date().toISOString();
<                     localStorage.setItem('lastInventoryPush', now);
<                     $('#lastInventoryPush').text(new Date(now).toLocaleDateString());
<                     
<                     displayFlashMessage('success', `<i class="fas fa-check-circle"></i> Successfully pushed ${data.count || 0} inventory items to server`);
<                     
<                     inventorySyncStatus = 'idle';
<                     $('#inventorySyncStatusText').html('Status: <span class="status-online">Ready</span>');
<                     
<                     // Hide progress after delay
<                     setTimeout(() => {
<                         $('#inventoryProgressContainer').hide();
<                         $('#pushButtonText').text('Push Inventory');
<                     }, 3000);
<                 },
<                 error: function(xhr) {
<                     console.error("Error pushing inventory:", xhr.responseText);
<                     const errorMessage = xhr.responseJSON ? xhr.responseJSON.message : "Failed to push inventory to server";
<                     
<                     updateInventorySyncButton('#pushInventoryBtn', '#pushIcon', '#pushButtonText', 'error', false);
<                     $('#pushButtonText').text('Push Failed');
<                     
<                     $('#inventorySyncMessage').text('Push failed: ' + errorMessage);
<                     displayFlashMessage('danger', '<i class="fas fa-times-circle"></i> ' + errorMessage);
<                     
<                     inventorySyncStatus = 'idle';
<                     $('#inventorySyncStatusText').html('Status: <span class="status-online">Ready</span>');
<                     
<                     setTimeout(() => {
<                         $('#inventoryProgressContainer').hide();
<                         $('#pushButtonText').text('Push Inventory');
---
>                         syncBtn.disabled = false;
>                         syncBtn.classList.remove("syncing", "success", "error");
>                         syncIcon.classList.remove("fa-spin");
>                         syncButtonText.textContent = "Sync Now";
1015,1307d655
<         });
< 
<         /**
<          * Full inventory synchronization (pull then push)
<          */
<         $('#syncInventoryBtn').on('click', function() {
<             if (!isOnline || inventorySyncStatus === 'syncing') {
<                 return;
<             }
< 
<             if (!confirm('This will perform a full inventory synchronization: first pull from server, then push local changes. This ensures both systems are up-to-date. Continue?')) {
<                 return;
<             }
< 
<             inventorySyncStatus = 'syncing';
<             const fullSyncBtn = $(this);
<             const originalText = fullSyncBtn.html();
<             
<             fullSyncBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin mr-1"></i>Full Sync...');
<             $('#inventorySyncStatusText').html('Status: <span class="status-syncing">Full Sync in Progress...</span>');
<             $('#inventoryProgressContainer').show();
<             $('#inventoryProgressBar').css('width', '5%');
<             $('#inventorySyncMessage').text('Starting full synchronization...');
< 
<             // Disable other buttons
<             $('#pullInventoryBtn, #pushInventoryBtn').prop('disabled', true);
< 
<             // First, pull inventory
<             $.ajax({
<                 url: '/api/v1/inventory/pull',
<                 type: 'POST',
<                 headers: {
<                     'X-CSRFToken': getCSRFToken(),
<                     'X-Requested-With': 'XMLHttpRequest'
<                 },
<                 success: function(pullData) {
<                     $('#inventoryProgressBar').css('width', '50%');
<                     $('#inventorySyncMessage').text(`Pulled ${pullData.count || 0} items. Now pushing local changes...`);
<                     
<                     // Then push inventory
<                     $.ajax({
<                         url: '/api/v1/inventory/push',
<                         type: 'POST',
<                         headers: {
<                             'X-CSRFToken': getCSRFToken(),
<                             'X-Requested-With': 'XMLHttpRequest'
<                         },
<                         success: function(pushData) {
<                             $('#inventoryProgressBar').css('width', '100%');
<                             $('#inventorySyncMessage').text(`Full sync complete! Pulled ${pullData.count || 0}, pushed ${pushData.count || 0} items`);
<                             
<                             // Update UI
<                             const now = new Date().toISOString();
<                             localStorage.setItem('lastInventoryPull', now);
<                             localStorage.setItem('lastInventoryPush', now);
<                             $('#lastInventoryPull').text(new Date(now).toLocaleDateString());
<                             $('#lastInventoryPush').text(new Date(now).toLocaleDateString());
<                             $('#localInventoryCount').text(pushData.total_local_items || 0);
<                             
<                             displayFlashMessage('success', `<i class="fas fa-check-circle"></i> Full inventory sync complete! Pulled ${pullData.count || 0}, pushed ${pushData.count || 0} items`);
<                             
<                             // Reset button state
<                             fullSyncBtn.removeClass('btn-warning').addClass('btn-success').html('<i class="fas fa-check mr-1"></i>Sync Complete');
<                             
<                             setTimeout(() => {
<                                 fullSyncBtn.removeClass('btn-success').addClass('btn-warning').html(originalText).prop('disabled', false);
<                                 $('#pullInventoryBtn, #pushInventoryBtn').prop('disabled', false);
<                                 $('#inventoryProgressContainer').hide();
<                                 inventorySyncStatus = 'idle';
<                                 $('#inventorySyncStatusText').html('Status: <span class="status-online">Ready</span>');
<                             }, 3000);
<                         },
<                         error: function(xhr) {
<                             handleFullSyncError('Push phase failed', xhr, fullSyncBtn, originalText);
<                         }
<                     });
<                 },
<                 error: function(xhr) {
<                     handleFullSyncError('Pull phase failed', xhr, fullSyncBtn, originalText);
<                 }
<             });
<         });
< 
<         /**
<          * Handle full sync errors
<          */
<         function handleFullSyncError(phase, xhr, button, originalText) {
<             console.error("Full sync error:", xhr.responseText);
<             const errorMessage = xhr.responseJSON ? xhr.responseJSON.message : phase;
<             
<             $('#inventorySyncMessage').text('Full sync failed: ' + errorMessage);
<             displayFlashMessage('danger', `<i class="fas fa-times-circle"></i> ${phase}: ${errorMessage}`);
<             
<             button.removeClass('btn-warning').addClass('btn-danger').html('<i class="fas fa-times mr-1"></i>Sync Failed');
<             
<             setTimeout(() => {
<                 button.removeClass('btn-danger').addClass('btn-warning').html(originalText).prop('disabled', false);
<                 $('#pullInventoryBtn, #pushInventoryBtn').prop('disabled', false);
<                 $('#inventoryProgressContainer').hide();
<                 inventorySyncStatus = 'idle';
<                 $('#inventorySyncStatusText').html('Status: <span class="status-online">Ready</span>');
<             }, 3000);
<         }
< 
<         // ===== EXISTING SYNC FUNCTIONS =====
< 
<         /**
<          * Start synchronization process
<          */
<         $('#triggerSyncBtn').on('click', function() {
<             if (currentSyncStatus === 'in_progress' || !isOnline) {
<                 return;
<             }
< 
<             if (!confirm('Starting data synchronization. This will fetch new data from online and push local unsynced sales. This might take a moment. Do you want to proceed?')) {
<                 return;
<             }
< 
<             // Immediately update UI
<             updateSyncUI({
<                 status: 'in_progress',
<                 is_running: true,
<                 message: 'Starting synchronization...',
<                 progress: 5,
<                 online: true
<             });
< 
<             $.ajax({
<                 url: "{{ url_for('sync_businesses') }}",
<                 type: 'POST',
<                 headers: {
<                     'X-CSRFToken': getCSRFToken(),
<                     'X-Requested-With': 'XMLHttpRequest'
<                 },
<                 success: function(data) {
<                     displayFlashMessage('success', '<i class="fas fa-check-circle"></i> ' + (data.message || 'Synchronization started successfully'));
<                     console.log('Sync started successfully:', data);
<                 },
<                 error: function(xhr) {
<                     console.error("Error triggering sync:", xhr.responseText);
<                     const errorMessage = xhr.responseJSON ? xhr.responseJSON.message : "An unknown error occurred during sync.";
<                     displayFlashMessage('danger', '<i class="fas fa-times-circle"></i> ' + errorMessage);
<                     updateSyncUI({
<                         status: 'error',
<                         message: errorMessage,
<                         is_running: false,
<                         progress: 0,
<                         online: isOnline
<                     });
<                 }
<             });
<         });
< 
<         /**
<          * Test connection to remote server
<          */
<         $('#testConnectionBtn').on('click', function() {
<             const testButton = $(this);
<             const originalText = testButton.html();
<             
<             testButton.prop('disabled', true).html('<i class="fas fa-spinner fa-spin mr-1"></i> Testing...');
< 
<             $.ajax({
<                 url: "{{ url_for('test_connection') }}",
<                 type: 'POST',
<                 headers: {
<                     'X-CSRFToken': getCSRFToken(),
<                     'X-Requested-With': 'XMLHttpRequest'
<                 },
<                 success: function(data) {
<                     updateSyncUI({
<                         status: data.success ? 'ready' : 'error',
<                         message: data.message,
<                         online: data.success,
<                         is_running: false
<                     });
< 
<                     // Show temporary feedback
<                     testButton.html(data.success 
<                         ? '<i class="fas fa-check mr-1"></i> Connected!' 
<                         : '<i class="fas fa-times mr-1"></i> Failed');
<                     testButton.toggleClass('btn-outline-light btn-outline-success', data.success)
<                              .toggleClass('btn-outline-danger', !data.success);
< 
<                     setTimeout(() => {
<                         testButton.html(originalText)
<                                  .removeClass('btn-outline-success btn-outline-danger')
<                                  .addClass('btn-outline-light')
<                                  .prop('disabled', false);
<                     }, 2000);
< 
<                     displayFlashMessage(data.success ? 'success' : 'danger', 
<                         `<i class="fas fa-${data.success ? 'check' : 'times'}-circle"></i> ${data.message}`);
<                 },
<                 error: function(xhr) {
<                     console.error('Error testing connection:', xhr.responseText);
<                     testButton.html('<i class="fas fa-times mr-1"></i> Error')
<                              .removeClass('btn-outline-light')
<                              .addClass('btn-outline-danger');
<                     
<                     setTimeout(() => {
<                         testButton.html(originalText)
<                                  .removeClass('btn-outline-danger')
<                                  .addClass('btn-outline-light')
<                                  .prop('disabled', false);
<                     }, 2000);
< 
<                     updateSyncUI({
<                         status: 'error',
<                         message: 'Connection test failed',
<                         online: false,
<                         is_running: false
<                     });
< 
<                     displayFlashMessage('danger', '<i class="fas fa-times-circle"></i> Connection test failed');
<                 }
<             });
<         });
< 
<         // ===== BACKUP FUNCTIONS =====
< 
<         /**
<          * Load backup status from server
<          */
<         function loadBackupStatus() {
<             $.get('/backup/status-api')
<                 .done(function(data) {
<                     if (data.backups) {
<                         $('#totalBackupsCount').text(data.backups.length);
<                         if (data.backups.length > 0) {
<                             const latest = data.backups[0];
<                             $('#lastBackupTime').text('Last Backup: ' + latest.created_at);
<                         }
<                     }
<                 })
<                 .fail(function() {
<                     $('#lastBackupTime').text('Last Backup: Error loading status');
<                 });
<         }
< 
<         /**
<          * Create manual backup
<          */
<         function createManualBackup() {
<             const btn = $('#createBackupBtn');
<             const originalText = btn.html();
<             
<             // Show progress
<             btn.prop('disabled', true)
<                .removeClass('btn-light')
<                .addClass('btn-warning')
<                .html('<i class="fas fa-spinner fa-spin mr-1"></i> Creating...');
<             
<             $('#backupProgressContainer').show();
<             $('#backupProgressBar').css('width', '50%');
<             $('#backupMessage').text('Creating database backup...');
< 
<             $.post('/backup/create')
<                 .done(function(response) {
<                     $('#backupProgressBar').css('width', '100%');
<                     $('#backupMessage').text('Backup created successfully!');
<                     
<                     // Show success message
<                     displayFlashMessage('success', '<i class="fas fa-check-circle"></i> Backup created successfully!');
<                     
<                     // Update backup status
<                     loadBackupStatus();
<                     
<                     setTimeout(function() {
<                         $('#backupProgressContainer').hide();
<                         $('#backupProgressBar').css('width', '0%');
<                     }, 2000);
<                 })
<                 .fail(function(xhr) {
<                     let errorMsg = 'Failed to create backup';
<                     if (xhr.responseJSON && xhr.responseJSON.error) {
<                         errorMsg = xhr.responseJSON.error;
<                     }
<                     
<                     $('#backupMessage').text('Error: ' + errorMsg);
<                     displayFlashMessage('danger', '<i class="fas fa-times-circle"></i> Backup failed: ' + errorMsg);
<                     
<                     setTimeout(function() {
<                         $('#backupProgressContainer').hide();
<                         $('#backupProgressBar').css('width', '0%');
<                     }, 3000);
<                 })
<                 .always(function() {
<                     btn.prop('disabled', false)
<                        .removeClass('btn-warning')
<                        .addClass('btn-light')
<                        .html(originalText);
<                 });
1308a657,658
>     });
> </script>
1310,1324d659
<         // Cleanup and visibility handling
<         $(window).on('beforeunload', function() {
<             stopSyncStatusPolling();
<         });
< 
<         $(document).on('visibilitychange', function() {
<             if (document.hidden) {
<                 stopSyncStatusPolling();
<             } else {
<                 if ($('#syncStatusText').length) {
<                     startSyncStatusPolling();
<                 }
<             }
<         });
<     </script>
1326c661
< </html>
\ No newline at end of file
---
> </html>
Files are different
