"""Add missing 'name' column to Company table

Revision ID: afa94dcacb37
Revises: 9f39f1405456
Create Date: 2025-08-22 03:19:00.901779

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import text # IMPORTANT: Add this import


# revision identifiers, used by Alembic.
revision = 'afa94dcacb37'
down_revision = '9f39f1405456' # MAKE SURE THIS MATCHES YOUR FILE'S down_revision
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('companies', schema=None) as batch_op:
        # Step 1: Add 'name' column as nullable initially
        batch_op.add_column(sa.Column('name', sa.String(length=100), nullable=True)) # Temporarily nullable

    # Step 2: Transfer data from 'company_name' to 'name'
    op.execute(text("UPDATE companies SET name = company_name WHERE company_name IS NOT NULL"))

    # Step 3: Handle any remaining NULLs in 'name' before making it NOT NULL
    # This might happen if 'company_name' itself had NULLs or was not the source.
    # We use '|| CAST(id AS VARCHAR)' to ensure uniqueness for generated names.
    op.execute(text("UPDATE companies SET name = 'Unnamed Company ' || CAST(id AS VARCHAR) WHERE name IS NULL"))

    # NEW Step 4: Deduplicate existing company names before making 'name' unique and NOT NULL
    # This crucial step identifies duplicates and appends a unique suffix.
    op.execute(text("""
        WITH cte AS (
            SELECT
                id,
                name,
                ROW_NUMBER() OVER (PARTITION BY name ORDER BY id) as rn
            FROM companies
        )
        UPDATE companies
        SET name = cte.name || ' (' || cte.rn || ')'
        FROM cte
        WHERE companies.id = cte.id AND cte.rn > 1;
    """))

    with op.batch_alter_table('companies', schema=None) as batch_op:
        # Step 5: Alter 'name' column to be NOT NULL
        batch_op.alter_column('name',
               existing_type=sa.String(length=100),
               nullable=False)
        
        # Step 6: Create unique constraint on 'name'
        batch_op.create_unique_constraint("uq_companies_name", ['name']) # Provide a name for the unique constraint

        # Step 7: Add 'date_added' column
        batch_op.add_column(sa.Column('date_added', sa.DateTime(), nullable=True)) 

        # Step 8: Drop old constraints and columns
        # Try-except block for dropping constraint to avoid migration failure if constraint doesn't exist
        try:
            batch_op.drop_constraint(batch_op.f('_company_name_business_uc'), type_='unique')
        except Exception:
            print("Constraint '_company_name_business_uc' not found or already dropped. Skipping.")

        batch_op.drop_column('company_name')
        batch_op.drop_column('synced_to_remote')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('companies', schema=None) as batch_op:
        batch_op.add_column(sa.Column('synced_to_remote', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('company_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
        # Drop the new unique constraint on 'name'
        batch_op.drop_constraint("uq_companies_name", type_='unique')
        # Recreate the old unique constraint (adjust this if 'company_name' was not unique with 'business_id')
        batch_op.create_unique_constraint(batch_op.f('_company_name_business_uc'), ['company_name', 'business_id'])
        batch_op.drop_column('date_added')
        batch_op.drop_column('name')

    # ### end Alembic commands ###
