"""Add composite unique index for business_id and barcode, allowing multiple NULLs for barcode

Revision ID: 8d26cab9393e
Revises: afa94dcacb37
Create Date: 2025-08-22 13:52:04.646046

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '8d26cab9393e'
down_revision = 'afa94dcacb37'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop existing unique constraint/index on just 'barcode' if it exists.
    with op.batch_alter_table('inventory_items', schema=None) as batch_op:
        try:
            batch_op.drop_constraint('inventory_items_barcode_key', type_='unique')
        except Exception:
            pass
        try:
            batch_op.drop_index('idx_unique_active_barcode', postgresql_where=sa.text('barcode IS NOT NULL'))
        except Exception:
            pass

        # ⭐ Add a new composite unique index on (business_id, barcode)
        batch_op.create_index(
            'uq_inventory_item_business_barcode',
            ['business_id', 'barcode'],
            unique=True,
            postgresql_where=sa.text('barcode IS NOT NULL')
        )

    # These are unrelated commands from your original file.
    with op.batch_alter_table('future_orders', schema=None) as batch_op:
        batch_op.drop_column('date_ordered')

    with op.batch_alter_table('rental_records', schema=None) as batch_op:
        batch_op.drop_column('date_recorded')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # These are unrelated commands from your original file.
    with op.batch_alter_table('rental_records', schema=None) as batch_op:
        batch_op.add_column(sa.Column('date_recorded', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False))

    with op.batch_alter_table('future_orders', schema=None) as batch_op:
        batch_op.add_column(sa.Column('date_ordered', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False))

    with op.batch_alter_table('inventory_items', schema=None) as batch_op:
        # ⭐ Drop the new composite unique index
        batch_op.drop_index('uq_inventory_item_business_barcode', postgresql_where=sa.text('barcode IS NOT NULL'))
        
        # Re-create the old unique constraint/index.
        batch_op.create_unique_constraint('inventory_items_barcode_key', ['barcode'])

    # ### end Alembic commands ###