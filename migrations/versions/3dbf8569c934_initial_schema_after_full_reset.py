"""Comprehensive schema synchronization for app.py

Revision ID: 1340fbbf7be0
Revises:
Create Date: 2025-08-16 09:10:00.000000 # Your actual creation date/time

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from datetime import datetime

# revision identifiers, used by Alembic.
revision = '1340fbbf7be0'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # --- businesses table ---
    with op.batch_alter_table('businesses', schema=None) as batch_op:
        # Step 1: Add 'is_active' as NULLABLE first
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True))
        # Step 1: Add 'last_updated' as NULLABLE first
        batch_op.add_column(sa.Column('last_updated', sa.DateTime(), nullable=True))

    # Step 2: Populate existing rows for 'is_active' and 'last_updated' in 'businesses'
    # These op.execute statements must come AFTER batch_op.add_column for that column
    # and BEFORE batch_op.alter_column for that column.
    op.execute('UPDATE businesses SET is_active = TRUE WHERE is_active IS NULL')
    op.execute("UPDATE businesses SET last_updated = NOW() WHERE last_updated IS NULL")

    with op.batch_alter_table('businesses', schema=None) as batch_op:
        # Step 3: Alter 'is_active' to be NOT NULL and set a server default
        batch_op.alter_column('is_active',
                                existing_type=sa.Boolean(),
                                nullable=False,
                                existing_nullable=True,
                                server_default=sa.true())
        # Step 3: Alter 'last_updated' to be NOT NULL
        batch_op.alter_column('last_updated',
                                existing_type=sa.DateTime(),
                                nullable=False,
                                existing_nullable=True)


    # --- users table ---
    with op.batch_alter_table('users', schema=None) as batch_op:
        # Step 1: Add 'is_active' as NULLABLE first
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True))
        # If 'last_password_update' is new and nullable=False in model, add it here as nullable=True
        # batch_op.add_column(sa.Column('last_password_update', sa.DateTime(), nullable=True))

    # Step 2: Populate existing rows for 'is_active' in 'users'
    op.execute('UPDATE users SET is_active = TRUE WHERE is_active IS NULL')
    # If 'last_password_update' is new and nullable=False in model, populate it here
    # op.execute("UPDATE users SET last_password_update = NOW() WHERE last_password_update IS NULL")

    with op.batch_alter_table('users', schema=None) as batch_op:
        # Step 3: Alter 'is_active' to be NOT NULL and set a server default
        batch_op.alter_column('is_active',
                                existing_type=sa.Boolean(),
                                nullable=False,
                                existing_nullable=True,
                                server_default=sa.true())
        # If 'last_password_update' was added, alter it here
        # batch_op.alter_column('last_password_update',
        #                       existing_type=sa.DateTime(),
        #                       nullable=False,
        #                       existing_nullable=True)


    # --- sales_records table ---
    with op.batch_alter_table('sales_records', schema=None) as batch_op:
        # Step 1: Add 'synced_to_remote' as NULLABLE first
        batch_op.add_column(sa.Column('synced_to_remote', sa.Boolean(), nullable=True))

        # If 'transaction_id' changed to NOT NULL and has existing NULLs, handle similarly:
        # batch_op.alter_column('transaction_id', existing_type=sa.VARCHAR(length=36), nullable=True)


    # Step 2: Populate existing rows for 'synced_to_remote' in 'sales_records'
    op.execute('UPDATE sales_records SET synced_to_remote = FALSE WHERE synced_to_remote IS NULL')

    with op.batch_alter_table('sales_records', schema=None) as batch_op:
        # Step 3: Alter 'synced_to_remote' to be NOT NULL and set a server default
        batch_op.alter_column('synced_to_remote',
                                existing_type=sa.Boolean(),
                                nullable=False,
                                existing_nullable=True,
                                server_default=sa.false())

        # If 'transaction_id' was altered to NOT NULL
        # batch_op.alter_column('transaction_id', existing_type=sa.VARCHAR(length=36), nullable=False)


    # --- companies table ---
    with op.batch_alter_table('companies', schema=None) as batch_op:
        # Step 1: Add 'last_updated' as NULLABLE first
        batch_op.add_column(sa.Column('last_updated', sa.DateTime(), nullable=True))

    # Step 2: Populate existing rows for 'last_updated' in 'companies'
    op.execute("UPDATE companies SET last_updated = NOW() WHERE last_updated IS NULL")

    with op.batch_alter_table('companies', schema=None) as batch_op:
        # Step 3: Alter 'last_updated' to be NOT NULL
        batch_op.alter_column('last_updated',
                                existing_type=sa.DateTime(),
                                nullable=False,
                                existing_nullable=True)

    # --- IMPORTANT: COMMENT OUT any op.drop_index() or op.drop_constraint() calls ---
    # If Alembic autogenerated any of these, they might refer to indexes/constraints
    # that don't exist in your live database, causing errors. Example:
    # with op.batch_alter_table('some_other_table', schema=None) as batch_op:
    #    # batch_op.drop_index(batch_op.f('ix_some_other_table_column'))
    #    # batch_op.drop_constraint(batch_op.f('some_other_table_some_key'), type_='unique')

    # Add any other table/column creation or modification as needed based on your current models
    # For example, if 'barcode' was added to inventory_items, it should be handled:
    # with op.batch_alter_table('inventory_items', schema=None) as batch_op:
    #    batch_op.add_column(sa.Column('barcode', sa.String(50), nullable=True))
    #    batch_op.create_unique_constraint(batch_op.f('uq_inventory_items_barcode'), ['barcode'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # --- Downgrade for companies table ---
    with op.batch_alter_table('companies', schema=None) as batch_op:
        batch_op.drop_column('last_updated')

    # --- Downgrade for sales_records table ---
    with op.batch_alter_table('sales_records', schema=None) as batch_op:
        batch_op.drop_column('synced_to_remote')
        # If transaction_id was made NOT NULL, revert it here
        # batch_op.alter_column('transaction_id', existing_type=sa.VARCHAR(length=36), nullable=True)

    # --- Downgrade for users table ---
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_column('is_active')
        # If last_password_update was altered, revert it here
        # batch_op.drop_column('last_password_update')

    # --- Downgrade for businesses table ---
    with op.batch_alter_table('businesses', schema=None) as batch_op:
        batch_op.drop_column('last_updated')
        batch_op.drop_column('is_active')

    # If barcode was added to inventory_items in upgrade, drop it here
    # with op.batch_alter_table('inventory_items', schema=None) as batch_op:
    #    batch_op.drop_constraint(batch_op.f('uq_inventory_items_barcode'), type_='unique')
    #    batch_op.drop_column('barcode')

    # ### end Alembic commands ###
